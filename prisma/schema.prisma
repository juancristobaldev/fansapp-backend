// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model users {
  id        Int        @unique @default(autoincrement())
  token     String     @db.Text
  username  String?    @db.VarChar(50)
  name      String     @db.VarChar(50)
  gender    String?    @db.VarChar(20)
  birthday  String?    @db.VarChar(15)
  email     String     @unique @db.VarChar(60)
  password  String     @db.Text
  salt      String     @db.Text
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  profile   profile?
  likes     likes[]
  medias    posts[]
  comments  comments[]
}

model profile {
  id          Int     @unique @default(autoincrement())
  photo       String? @db.Text
  description String? @db.Text
  frontPage   String? @db.Text
  userId      Int     @unique
  users       users   @relation(fields: [userId], references: [id])
}

model posts {
  id        Int        @unique @default(autoincrement())
  multimedia        String  @db.Text
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  type      String     @db.VarChar(30)
  description String? @db.VarChar(200)
  location String? @db.Text()
  onlySuscriptors Boolean
  usersId   Int?
  users     users?     @relation(fields: [usersId], references: [id])
  likes     likes[]
  comments  comments[]
}

model likes {
  id      Int    @unique @default(autoincrement())
  users   users? @relation(fields: [usersId], references: [id])
  usersId Int
  media   posts? @relation(fields: [mediaId], references: [id])
  mediaId Int?
}

model comments {
  id          Int        @id @default(autoincrement())
  content     String     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parentId    Int?       @map("parent_id")
  parent      comments?  @relation("Subcomentarios", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcomments comments[] @relation("Subcomentarios")
  users       users?     @relation(fields: [usersId], references: [id])
  usersId     Int?
  posts       posts?     @relation(fields: [postsId], references: [id])
  postsId     Int?
}
