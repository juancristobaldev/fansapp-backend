// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model users {
  id              Int            @unique @default(autoincrement())
  token           String         @unique @db.VarChar(40)
  username        String         @unique @db.VarChar(25)
  firstName       String         @db.VarChar(20)
  lastName        String         @db.VarChar(20)
  gender          String?        @db.VarChar(20)
  phoneNumber     String?        @db.VarChar(20)
  birthday        String?        @db.VarChar(15)
  email           String         @unique @db.VarChar(60)
  password        String         @db.VarChar(255)
  createdAt       DateTime       @default(now())
  updateAt        DateTime?      @updatedAt
  updateFirstName Boolean        @default(false)
  updateLastName  Boolean        @default(false)
  rol             String?        @default("customer") @db.VarChar(20)
  profile         profile?
  likes           likes[]
  posts           posts[]
  comments        comments[]
  multimedia      multimedia[]
  bookmarkers     bookmarkers[]
  suscriptions    suscriptions[]
  creator         creator?
  privacity       privacity?
  blockeds        blockeds[]
  customer        customer?
  theme           theme?
  notifications   notifications?
  sessions        sessions[]
  bags            bags[]
}

model customer {
  id              Int       @unique @default(autoincrement())
  customerId      String    @unique @db.VarChar(30)
  last4CardDigits Int?
  status          Int?
  createdAt       DateTime? @default(now())
  registerDate    DateTime?
  user            users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int       @unique
  shopping        sales[]
  wallet          wallet?
}

model plans {
  id                        Int            @unique @default(autoincrement())
  creator                   creator        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId                 Int
  createdAt                 DateTime?      @default(now())
  updateAt                  DateTime?
  amount                    Float?
  yearlyAmount              Float?
  yearlyAmountWithDiscount  Float?
  monthlyAmountWithDiscount Float?
  discount                  Int            @default(0)
  yearlyVisibility          Boolean        @default(true)
  visibility                Boolean        @default(true)
  type                      String         @db.Char(10)
  suscriptors               suscriptions[]
  digitalProduct            digitalProduct @relation(fields: [digitalProductId], references: [id])
  digitalProductId          Int            @unique
}

model digitalProduct {
  id           Int           @unique @default(autoincrement())
  creator      creator       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    Int
  plan         plans?
  post         posts?
  paidMessages paidMessages?
  sales        sales[]
}

model paidMessages {
  id               Int            @unique @default(autoincrement())
  amount           Float?
  visibility       Boolean?       @default(true)
  digitalProduct   digitalProduct @relation(fields: [digitalProductId], references: [id], onDelete: Cascade)
  digitalProductId Int            @unique
  creator          creator        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId        Int            @unique
}

model wallet {
  id         Int         @unique @default(autoincrement())
  amount     Float
  movements  movements[]
  customer   customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int         @unique
  revenue    movements[] @relation("receiverWallet")
}

model movements {
  id        Int      @unique @default(autoincrement())
  amount    Float
  type      String   @db.VarChar(30)
  createdAt DateTime @default(now())

  wallet           wallet  @relation(fields: [walletId], references: [id])
  walletId         Int
  receiverWallet   wallet? @relation("receiverWallet", fields: [receiverWalletId], references: [id])
  receiverWalletId Int?

  sales sales?
}

model bags {
  id        Int     @id @unique @default(autoincrement())
  creator   creator @relation(fields: [creatorId], references: [id])
  creatorId Int
  messages  Int     @default(5)
  user      users   @relation(fields: [usersId], references: [id])
  usersId   Int
}

model profile {
  id          Int     @id @unique @default(autoincrement())
  linkProfile String? @db.Text
  photo       String? @db.Text
  description String? @db.Text
  location    String? @db.Text
  language    String? @db.Text
  frontPage   String? @db.Text
  tiktok      String? @db.Text
  instagram   String? @db.Text
  userId      Int     @unique
  users       users   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model sales {
  id               String          @id @unique @db.VarChar(15)
  status           Int             @default(1)
  subject          String          @db.Text()
  paymentMethod    String?         @db.VarChar(20)
  paymentDate      DateTime?
  createdDate      DateTime?       @default(now())
  transferDate     DateTime?
  amount           Float
  customer         customer        @relation(fields: [customerId], references: [id])
  digitalProduct   digitalProduct? @relation(fields: [digitalProductId], references: [id])
  digitalProductId Int?
  customerId       Int
  movements        movements?      @relation(fields: [movementsId], references: [id])
  movementsId      Int?            @unique
}

model privacity {
  id       Int    @id @unique @default(autoincrement())
  userId   Int    @unique
  users    users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile  String @default("all") @db.VarChar(20)
  messages String @default("nobody") @db.VarChar(20)
}

model blockeds {
  id        Int   @id @unique @default(autoincrement())
  userId    Int
  users     users @relation(fields: [userId], references: [id], onDelete: Cascade)
  blockedBy Int
}

model sessions {
  id            Int      @id @unique @default(autoincrement())
  deviceName    String   @db.VarChar(30)
  lastSessionAt DateTime @default(now())
  signInAt      DateTime @default(now())
  browser       String   @db.VarChar(30)
  source        String   @db.Text
  user          users?   @relation(fields: [userId], references: [id])
  userId        Int?
}

model notifications {
  id           Int     @id @unique @default(autoincrement())
  messages     Boolean @default(true)
  paidMessages Boolean @default(true)
  likes        Boolean @default(true)
  comments     Boolean @default(true)
  donations    Boolean @default(true)
  suscriptors  Boolean @default(true)
  users        users   @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId      Int     @unique
}

model theme {
  id          Int     @id @unique @default(autoincrement())
  darkMode    Boolean @default(false)
  languageApp String  @default("spanish") @db.VarChar(20)
  themeColor  String  @default("#eb117a") @db.Char(7)
  users       users   @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId     Int     @unique
}

model suscriptions {
  id        Int       @unique @default(autoincrement())
  status    Int?      @default(1)
  user      users?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  creator   creator?  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId Int?
  createdAt DateTime  @default(now())
  deadDate  DateTime?
  price     Int?
  plans     plans?    @relation(fields: [plansId], references: [id])
  plansId   Int?
}

model creator {
  id             Int              @unique @default(autoincrement())
  status         String           @default("pending") @db.VarChar(30)
  approbedDate   DateTime?
  requestDate    DateTime?
  likes          likes[]
  suscriptors    suscriptions[]
  saveds         bookmarkers[]
  userId         Int              @unique
  user           users            @relation(fields: [userId], references: [id], onDelete: Cascade)
  country        String           @db.VarChar(60)
  city           String           @db.VarChar(60)
  address        String           @db.VarChar(60)
  zipCode        String           @db.VarChar(60)
  dniFront       String           @db.Text
  dniBack        String           @db.Text
  digitalProduct digitalProduct[]
  plans          plans[]
  bags           bags[]
  paidMessages   paidMessages?
}

model bookmarkers {
  id        Int      @unique @default(autoincrement())
  post      posts?   @relation(fields: [postsId], references: [id], onDelete: Cascade)
  postsId   Int?
  creator   creator? @relation(fields: [creatorId], references: [id])
  creatorId Int?
  users     users    @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId   Int
  createdAt DateTime @default(now())
}

model multimedia {
  id      Int     @unique @default(autoincrement())
  source  String  @db.Text
  blur    String? @db.Text
  type    String  @db.VarChar(10)
  posts   posts?  @relation(fields: [postsId], references: [id], onDelete: Cascade)
  postsId Int?
  users   users?  @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId Int?
}

model posts {
  id               Int             @unique @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime?       @updatedAt
  amount           Float?
  description      String?         @db.VarChar(200)
  location         String?         @db.Text()
  privacity        String          @default("suscriptors") @db.VarChar(15)
  usersId          Int?
  users            users?          @relation(fields: [usersId], references: [id], onDelete: Cascade)
  likes            likes[]
  comments         comments[]
  multimedia       multimedia[]
  bookmarkers      bookmarkers[]
  digitalProduct   digitalProduct? @relation(fields: [digitalProductId], references: [id])
  digitalProductId Int?            @unique
}

model likes {
  id        Int      @unique @default(autoincrement())
  users     users    @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId   Int
  media     posts    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId   Int
  creator   creator? @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId Int?
}

model comments {
  id          Int        @id @default(autoincrement())
  content     String     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parentId    Int?       @map("parent_id")
  parent      comments?  @relation("Subcomentarios", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcomments comments[] @relation("Subcomentarios")
  users       users?     @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId     Int?
  posts       posts?     @relation(fields: [postsId], references: [id], onDelete: Cascade)
  postsId     Int?
}
