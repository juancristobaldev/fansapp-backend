// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model users {
  id         Int          @unique @default(autoincrement())
  token      String       @unique @db.VarChar(40)
  username   String       @unique @db.VarChar(15)
  firstName  String       @db.VarChar(20)
  lastName   String       @db.VarChar(20)
  gender     String?      @db.VarChar(6)
  birthday   String?      @db.VarChar(15)
  email      String       @unique @db.VarChar(60)
  password   String       @db.VarChar(255)
  createdAt  DateTime     @default(now())
  updateAt   DateTime?    @updatedAt
  profile    profile?
  likes      likes[]
  posts      posts[]
  comments   comments[]
  multimedia multimedia[]
}

model profile {
  id          Int     @unique @default(autoincrement())
  photo       String? @db.Text
  description String? @db.Text
  frontPage   String? @db.Text
  userId      Int     @unique
  users       users   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model multimedia {
  id      Int    @unique @default(autoincrement())
  source  String @db.Text
  type    String @db.VarChar(10)
  posts   posts? @relation(fields: [postsId], references: [id])
  postsId Int?
  users   users? @relation(fields: [usersId], references: [id])
  usersId Int?
}

model posts {
  id              Int          @unique @default(autoincrement())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime?    @updatedAt
  description     String?      @db.VarChar(200)
  location        String?      @db.Text()
  onlySuscriptors Boolean
  usersId         Int?
  users           users?       @relation(fields: [usersId], references: [id])
  likes           likes[]
  comments        comments[]
  multimedia      multimedia[]
}

model likes {
  id      Int    @unique @default(autoincrement())
  users   users? @relation(fields: [usersId], references: [id])
  usersId Int
  media   posts? @relation(fields: [mediaId], references: [id])
  mediaId Int?
}

model comments {
  id          Int        @id @default(autoincrement())
  content     String     @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parentId    Int?       @map("parent_id")
  parent      comments?  @relation("Subcomentarios", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcomments comments[] @relation("Subcomentarios")
  users       users?     @relation(fields: [usersId], references: [id])
  usersId     Int?
  posts       posts?     @relation(fields: [postsId], references: [id])
  postsId     Int?
}
