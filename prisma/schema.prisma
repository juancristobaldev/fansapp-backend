// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                   Int                   @unique @default(autoincrement())
  token                String                @unique @db.VarChar(40)
  username             String                @unique @db.VarChar(25)
  firstName            String                @db.VarChar(20)
  lastName             String                @db.VarChar(20)
  gender               String?               @db.VarChar(20)
  phoneNumber          String?               @db.VarChar(20)
  birthday             String?               @db.VarChar(15)
  email                String                @unique @db.VarChar(60)
  password             String                @db.VarChar(255)
  createdAt            DateTime              @default(now())
  updateAt             DateTime?             @updatedAt
  updateFirstName      Boolean               @default(false)
  updateLastName       Boolean               @default(false)
  rol                  String?               @default("customer") @db.VarChar(20)
  profile              Profile?
  likes                Like[]
  comments             Comment[]
  bookmarkers          Bookmarker[]
  suscriptions         Suscription[]
  creator              Creator?
  privacity            Privacity?
  blockeds             Blocked[]
  customer             Customer?
  theme                Theme?
  notifications        PrivacityNotification?
  sessions             Session[]
  notification         Notification[]
  sentMessages         Message[]
  notificationReceiver Notification[]        @relation("receiver")
  membersConversation  MemberOfConversation[]

}

model RequestCreator {
  id             Int              @unique   @default(autoincrement())
  status         String           @default("pending") @db.VarChar(30)
  country        String           @db.VarChar(60)
  city           String           @db.VarChar(60)
  address        String           @db.VarChar(60)
  zipCode        String           @db.VarChar(60)
  createdAt      DateTime         @default(now())
  dniFront       String           @db.Text
  dniBack        String           @db.Text
  creator        Creator  @relation(fields:[creatorId], references: [id], onDelete: Cascade)
  creatorId      Int
}

model Creator {
  id             Int              @unique @default(autoincrement())
  approbedDate   DateTime?
  category       String? @db.VarChar(50)
  likes          Like[]
  suscriptors    Suscription[]
  saveds         Bookmarker[]
  userId         Int              @unique
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  request        RequestCreator[]
  multimedias    Multimedia[]
  posts          Post[]
  digitalProduct DigitalProduct[]
  plans          Plan[]
  packages       Package[]
  paidMessages   PaidMessage?
}

model Customer {
  id              Int       @unique @default(autoincrement())
  customerId      String    @unique @db.VarChar(30)
  last4CardDigits Int?
  status          Int?
  createdAt       DateTime? @default(now())
  registerDate    DateTime?
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int       @unique
  shopping        Sale[]
  wallet          Wallet?
}

model Hashtag {
  id Int @unique @default(autoincrement())
  hashtag String @db.VarChar(25)
  profiles HashTagProfile[]
  posts HashTagPosts[]
}

model HashTagProfile {
  id Int @unique @default(autoincrement())
  hashtag Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)
  hashtagId Int
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int 
}

model HashTagPosts {
  id Int @unique @default(autoincrement())
  hashtag Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)
  hashtagId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int 
}

model Plan {
  id                        Int             @unique @default(autoincrement())
  creator                   Creator         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId                 Int
  title                     String          @db.VarChar(150)
  createdAt                 DateTime?       @default(now())
  updateAt                  DateTime?
  visibility                Boolean         @default(false)
  permissions               String          @db.VarChar(10) @default("all")
  suscriptors               Suscription[]
  digitalProduct            DigitalProduct  @relation(fields: [digitalProductId], references: [id])
  digitalProductId          Int             @unique
  postsOfPlans              PostOfPlan[]
  albumsOfPlans             PackageOfPlan[]
}

model PostOfPlan {
  id      Int   @unique @default(autoincrement())
  plans   Plan @relation(fields: [plansId], references: [id])
  posts   Post @relation(fields: [postsId], references: [id])
  plansId Int
  postsId Int
}

model PackageOfPlan {
  id       Int    @unique @default(autoincrement())
  album    Package @relation(fields: [albumsId], references: [id])
  plans    Plan  @relation(fields: [plansId], references: [id])
  albumsId Int
  plansId  Int
}

model Package {
  id                Int             @unique @default(autoincrement())
  multimedia        Multimedia[]
  creator           Creator           @relation(fields: [creatorId], references: [id])
  creatorId         Int
  sales             Sale[]
  privacity         String @db.VarChar(40)
  visibility        Boolean @default(true)
  albumsOfPlans     PackageOfPlan[]
  digitalProduct    DigitalProduct?  @relation(fields:[digitalProductId], references: [id])
  digitalProductId  Int? @unique
}

model DigitalProduct {
  id            Int           @unique @default(autoincrement())
  amount        Float?
  discount      Int @default(0)
  creator       Creator       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId     Int
  plan          Plan?
  post          Post?
  paidMessages  PaidMessage?
  package       Package?
  sales         Sale[]
}

model PaidMessage {
  id               Int            @unique @default(autoincrement())
  visibility       Boolean?       @default(true)
  digitalProduct   DigitalProduct @relation(fields: [digitalProductId], references: [id], onDelete: Cascade)
  digitalProductId Int            @unique
  creator          Creator        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId        Int            @unique
  message          Message[]
}

model Wallet {
  id         Int         @unique @default(autoincrement())
  amount     Float
  movements  Movement[]
  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int         @unique
  revenue    Movement[] @relation("receiverWallet")
}

model Movement {
  id               Int      @unique @default(autoincrement())
  amount           Float
  type             String   @db.VarChar(30)
  createdAt        DateTime @default(now())
  wallet           Wallet   @relation(fields: [walletId], references: [id])
  walletId         Int
  receiverWallet   Wallet?  @relation("receiverWallet", fields: [receiverWalletId], references: [id])
  receiverWalletId Int?
  sales Sale?
}



model Profile {
  id              Int     @id @unique @default(autoincrement())
  linkProfile     String? @db.Text
  photo           String? @db.Text
  frontPage       String? @db.Text
  description     String? @db.Text
  location        String? @db.Text
  language        String? @db.Text
  tiktok          String? @db.Text
  instagram       String? @db.Text
  userId          Int     @unique
  users           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  hashtags HashTagProfile[]
}

model Sale {
  id               String          @id @unique @db.VarChar(15)
  status           Int             @default(1)
  subject          String          @db.Text()
  paymentMethod    String?         @db.VarChar(20)
  paymentDate      DateTime?
  createdDate      DateTime?       @default(now())
  transferDate     DateTime?
  amount           Float
  customer         Customer        @relation(fields: [customerId], references: [id])
  digitalProduct   DigitalProduct? @relation(fields: [digitalProductId], references: [id])
  digitalProductId Int?
  customerId       Int
  movements        Movement?      @relation(fields: [movementsId], references: [id])
  movementsId      Int?            @unique
  albums           Package?         @relation(fields: [albumId], references: [id])
  albumId          Int?
}

model Privacity {
  id       Int    @id @unique @default(autoincrement())
  userId   Int    @unique
  users    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile  String @default("all") @db.VarChar(20)
  messages String @default("nobody") @db.VarChar(20)
  
}

model Blocked {
  id        Int   @id @unique @default(autoincrement())
  userId    Int
  users     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blockedBy Int
}

model Session {
  id            Int      @id @unique @default(autoincrement())
  deviceName    String   @db.VarChar(30)
  lastSessionAt DateTime @default(now())
  signInAt      DateTime @default(now())
  browser       String   @db.VarChar(30)
  source        String   @db.Text
  user          User?   @relation(fields: [userId], references: [id])
  userId        Int?
}

model PrivacityNotification {
  id           Int     @id @unique @default(autoincrement())
  messages     Boolean @default(true)
  paidMessages Boolean @default(true)
  likes        Boolean @default(true)
  purchases    Boolean @default(true)
  comments     Boolean @default(true)
  donations    Boolean @default(true)
  suscriptors  Boolean @default(true)
  users        User   @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId      Int     @unique
}

model Conversation {
  id        Int                   @id @unique @default(autoincrement())
  members   MemberOfConversation[]
  messages  Message[]
  createdAt DateTime              @default(now())
}

model MemberOfConversation {
  id             Int          @id @unique @default(autoincrement())
  user           User        @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId        Int
  rol            String       @db.VarChar(10)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int
  joinAt         DateTime     @default(now())
}

model Message {
  id             Int           @id @unique @default(autoincrement())
  content        String        @db.Text
  createdAt      DateTime      @default(now())
  transmitter    User         @relation(fields: [transmitterId], references: [id])
  transmitterId  Int
  paidMessages   PaidMessage? @relation(fields: [paidMessagesId], references: [id], onDelete: Cascade)
  paidMessagesId Int?
  multimedia     Multimedia[]
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId Int?
  seen           Boolean       @default(false)
}

model Notification {
  id         Int       @id @unique @default(autoincrement())
  content    String    @db.VarChar(255)
  likes      Like?    @relation(fields: [likesId], references: [id])
  comments   Comment? @relation(fields: [commentsId], references: [id])
  seen       Boolean   @default(false)
  createdAt  DateTime  @default(now())
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  receiverId Int
  user       User     @relation(fields: [usersId], references: [id])
  usersId    Int
  commentsId Int?
  likesId    Int?
}

model Theme {
  id          Int     @id @unique @default(autoincrement())
  darkMode    Boolean @default(false)
  languageApp String  @default("spanish") @db.VarChar(20)
  themeColor  String  @default("#eb117a") @db.Char(7)
  users       User   @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId     Int     @unique
}

model Suscription {
  id        Int       @unique @default(autoincrement())
  status    Int?      @default(1)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  creator   Creator?  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId Int?
  createdAt DateTime  @default(now())
  deadDate  DateTime?
  price     Int?
  plans     Plan?    @relation(fields: [plansId], references: [id])
  plansId   Int?
}



model Bookmarker {
  id        Int      @unique @default(autoincrement())
  post      Post?   @relation(fields: [postsId], references: [id], onDelete: Cascade)
  postsId   Int?
  creator   Creator? @relation(fields: [creatorId], references: [id])
  creatorId Int?
  users     User    @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId   Int
  createdAt DateTime @default(now())
}

model Multimedia {
  id        Int      @unique @default(autoincrement())
  source    String   @db.Text
  blur      String?  @db.Text
  type      String   @db.VarChar(10)
  thumbnail String?  @db.Text
  creator   Creator? @relation(fields:[creatorId],references: [id], onDelete: Cascade)
  creatorId Int?
  posts     Post?   @relation(fields: [postsId], references: [id], onDelete: SetNull)
  postsId   Int?
  message   Message? @relation(fields: [messageId], references: [id], onDelete: SetNull)
  messageId Int?
  albums    Package?  @relation(fields: [albumId], references: [id])
  albumId   Int?
}

model Post {
  id               Int             @unique @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime?       @updatedAt
  description      String?         @db.VarChar(200)
  location         String?         @db.Text()
  privacity        String          @default("suscriptors") @db.VarChar(15)
  creator          Creator? @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId        Int?
  digitalProduct   DigitalProduct? @relation(fields: [digitalProductId], references: [id])
  digitalProductId Int?            @unique
  likes            Like[]
  comments         Comment[]
  multimedia       Multimedia[]
  bookmarkers      Bookmarker[]
  postsOfPlans     PostOfPlan[]
  hashtags         HashTagPosts[]
}

model Like {
  id           Int            @unique @default(autoincrement())
  users        User          @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId      Int
  media        Post          @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId      Int
  creator      Creator?       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    Int?
  notification Notification[]
}

model Comment {
  id           Int            @id @default(autoincrement())
  content      String         @db.Text
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  parentId     Int?           @map("parent_id")
  parent       Comment?      @relation("Subcomentarios", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcomments  Comment[]     @relation("Subcomentarios")
  users        User?         @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId      Int?
  posts        Post?         @relation(fields: [postsId], references: [id], onDelete: Cascade)
  postsId      Int?
  notification Notification[]
}
